#!/usr/bin/env node
var args = process.argv.slice(2);

var exec = require('child_process').exec;
var fs = require("fs");

if (fs.existsSync(__dirname+"/../config/env_vars.js")) {
  var env = require(__dirname+"/../config/env_vars.js").env;
  for (i in env) { process.env[i] = env[i]; }
}

var models  = require(__dirname+"/../models");
// var express = require("express");
// var router = express.Router();
// var querystring = require("querystring");
// var fs = require("fs");
// var zlib = require("zlib");
// var exifTool = require("exiftool");
// var util = require("util");
// var hash = require(__dirname+"/../utils/hash.js").hash;
var token = require(__dirname+"/../utils/auth-token.js").token;
var aws = require(__dirname+"/../utils/external/aws.js").aws();
// var views = require(__dirname+"/../views/v1");
// var passport = require("passport");
// passport.use(require(__dirname+"/../middleware/passport-token").TokenStrategy);

var guardian_id = "0bdbb4a5d567";

models.Guardian
  .findOne( { where: { guid: guardian_id } })
  .then(function(dbGuardian){

    models.GuardianAudio
      .findAll({ 
        where: { guardian_id: dbGuardian.id, analysis_aws_queue_id: null }, 
   //     include: [ { all: true } ], 
        order: [ ["measured_at", "DESC"] ],
        limit: 250
      }).then(function(dbAudio){

        for (dbAudInd in dbAudio) {

        models.GuardianCheckIn
          .findOne( { 
            where: { id: dbAudio[dbAudInd].check_in_id },
            include: [ { all: true } ]
          }).then(function(dbCheckIn){


            dbCheckIn.Audio[0].s3Path = dbCheckIn.Audio[0].url.substr(13);

          token.createAnonymousToken({
            reference_tag: dbCheckIn.Audio[0].guid,
            token_type: "worker-analysis",
            created_by: "re-analyze-script",
            minutes_until_expiration: 2880,
            allow_garbage_collection: false,
            only_allow_access_to: [
              "^/v1/guardians/"+dbGuardian.guid+"/checkins/"+dbCheckIn.guid+"/audio/"+dbCheckIn.Audio[0].guid+"/events$"
              ]
          }).then(function(tokenInfo){




                          aws.sns().publish({
                            TopicArn: aws.snsTopicArn("rfcx-analysis"),
                            Message: JSON.stringify({
                                guardian_id: dbGuardian.guid,
                                checkin_id: dbCheckIn.guid,
                                audio_id: dbCheckIn.Audio[0].guid,
                                sha1Hash: dbCheckIn.Audio[0].sha1_checksum,
                                geoLocation: { latitude: 0, longitude: 0, precision: 0 },
                                timeStamp: dbCheckIn.Audio[0].measured_at.valueOf(),
                                measured_at: dbCheckIn.Audio[0].measured_at,
                                api_token_guid: tokenInfo.token_guid,
                                api_token: tokenInfo.token,
                                api_token_expires: tokenInfo.token_expires_at,
                                audioUrl: aws.s3SignedUrl("rfcx-ark", dbCheckIn.Audio[0].s3Path, 60),
                                s3Path: dbCheckIn.Audio[0].s3Path
                              })
                          }, function(snsErr, snsData) {

                            if (!!snsErr) {
                              console.log(snsErr);
                            } else {

                            dbCheckIn.Audio[0].analysis_aws_queue_id = snsData.MessageId;

                            dbCheckIn.Audio[0].save();

                            console.log(dbCheckIn.Audio[0].sha1_checksum +" | "+ dbCheckIn.guid +" | "+ snsData.MessageId);


                            }

                          });




          }).catch(function(err){
            console.log("error creating access token for analysis worker | "+err);
          });



            }).catch(function(err){
              console.log("failed to return checkin | "+err);
            });

        }

    }).catch(function(err){
      console.log("failed to return audio | "+err);
    });

  }).catch(function(err){
    console.log("failed to find guardian reference | "+err);
  });