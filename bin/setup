#!/usr/bin/env node
var exec = require('child_process').exec;
var fs = require("fs");
var models = require("../models");

if (fs.existsSync(__dirname+"/../config/env_vars.js")) {
  var env = require(__dirname+"/../config/env_vars.js").env;
  for (i in env) { process.env[i] = env[i]; }
}

// create ./tmp directory to support tests
if (!fs.existsSync(__dirname+"/../tmp")) {
  fs.mkdirSync(__dirname+"/../tmp");
}

// run the setup script(s)
generateSequelizeConfigJson();
purgeFilesInUploadCacheDirectory();

// sequelize sync
models.sequelize.sync().then(function() {
  // run sequelize-cli migrations from command line
  var seqCliPath = process.cwd()+'/node_modules/sequelize-cli/bin/sequelize';
  exec(seqCliPath+' db:migrate:old_schema; '+seqCliPath+' db:migrate;',function(err,sOut,sErr){ console.log(sOut); console.log(sErr); });
});


function generateSequelizeConfigJson() {

  var configJsonFile = __dirname+"/../config/config.json";

  var configCustom = '"username": "'+process.env.RDS_USERNAME+'", "password": "'+process.env.RDS_PASSWORD+'", "database": "'+process.env.RDS_DB_NAME+'", "host": "'+process.env.RDS_HOSTNAME+'"';
  var configGeneric = '"dialect": "mysql", "logging": '+process.env.SEQUELIZE_VERBOSE+', "define": { "underscored": true, "charset": "utf8", "collate": "utf8_general_ci", "timestamps": true }';

  var configJsonContent = '{ '
    +'\n"development": { '+configCustom+', '+configGeneric+' }, '
    +'\n"test": { '+configCustom+', '+configGeneric+' }, '
    +'\n"staging": { '+configCustom+', '+configGeneric+' }, '
    +'\n"production": { '+configCustom+', '+configGeneric+' } '
  +'\n}';

  fs.unlink(configJsonFile,function(e){
    fs.writeFile(configJsonFile, configJsonContent, function(e){
      if (!e) {
        exec( "echo 'sequelize config.json has been [re]generated.'; "
              ,function(err,stdout,stderr){
          console.log(stdout);
        });
      }
    });
  });
}

function purgeFilesInUploadCacheDirectory() {
  try {
    if (fs.existsSync(process.env.UPLOAD_CACHE_DIRECTORY)) {
      fs.readdir(process.env.UPLOAD_CACHE_DIRECTORY, function (err, uploads) {
        uploads.forEach(function (uploadFileName) {
          fs.unlink(process.env.UPLOAD_CACHE_DIRECTORY+uploadFileName,function(err){
             if (err) throw err;
          });
        }); 
      });
    }
    if (fs.existsSync(process.env.UPLOAD_CACHE_DIRECTORY+"../faux-knox/")) {
      fs.readdir(process.env.UPLOAD_CACHE_DIRECTORY+"../faux-knox/", function (err, uploads) {
        uploads.forEach(function (uploadFileName) {
          fs.unlink(process.env.UPLOAD_CACHE_DIRECTORY+"../faux-knox/"+uploadFileName,function(err){
             if (err) throw err;
          });
        }); 
      });
    }
  } catch(err) {
    console.error(err);
  }
}

