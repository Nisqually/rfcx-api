#!/usr/bin/env node
var exec = require('child_process').exec;
var fs = require("fs");

if (fs.existsSync(__dirname+"/../config/env_vars.js")) {
  var env = require(__dirname+"/../config/env_vars.js").env;
  for (i in env) { process.env[i] = env[i]; }
}

// run the setup script(s)
setupTmpDirectory();
initializeSequelize();

function initializeSequelize() {

  var configJsonFile = __dirname+"/../config/config.json";

  var sequelizeVerbose = (process.env.SEQUELIZE_VERBOSE != null) ? process.env.SEQUELIZE_VERBOSE : false;

  var configCustom = '"username": "'+process.env.RDS_USERNAME+'", "password": "'+process.env.RDS_PASSWORD+'", "database": "'+process.env.RDS_DB_NAME+'", "host": "'+process.env.RDS_HOSTNAME+'"';
  var configGeneric = '"dialect": "mysql", "logging": '+sequelizeVerbose+', "define": { "underscored": true, "charset": "utf8", "collate": "utf8_general_ci", "timestamps": true }';

  var configJsonContent = '{ '
    +'\n"development": { '+configCustom+', '+configGeneric+' }, '
    +'\n"test": { '+configCustom+', '+configGeneric+' }, '
    +'\n"staging": { '+configCustom+', '+configGeneric+' }, '
    +'\n"production": { '+configCustom+', '+configGeneric+' } '
  +'\n}';

  fs.unlink(configJsonFile,function(e){
    fs.writeFile(configJsonFile, configJsonContent, function(e){
      if (!e) {

        exec( "echo 'sequelize config.json has been [re]generated.'; "
              ,function(err,stdout,stderr){
          console.log(stdout);
        });

        var models = require("../models");
        
        // sequelize sync
        models.sequelize.sync().then(function() {
          // run sequelize-cli migrations from command line
          var seqCliPath = process.cwd()+'/node_modules/sequelize-cli/bin/sequelize';
          exec(seqCliPath+' db:migrate:old_schema; '+seqCliPath+' db:migrate;',function(err,sOut,sErr){ console.log(sErr); });
        });

      }
    });
  });
}

function setupTmpDirectory() {
  
  var tmpDir = process.cwd()+"/tmp";
  if (!fs.existsSync(tmpDir)) { fs.mkdirSync(tmpDir); }

  try {

    if (fs.existsSync(tmpDir+"/uploads")) {
      fs.readdir(tmpDir+"/uploads", function (err, uploads) {
        uploads.forEach(function (uploadFileName) {
          fs.unlink(tmpDir+"/uploads/"+uploadFileName,function(err){
             if (err) throw err;
          });
        }); 
      });
    } else { fs.mkdirSync(tmpDir+"/uploads"); }

    if (fs.existsSync(tmpDir+"/test-assets")) {
      fs.readdir(tmpDir+"/test-assets", function (err, uploads) {
        uploads.forEach(function (uploadFileName) {
          fs.unlink(tmpDir+"/test-assets/"+uploadFileName,function(err){
             if (err) throw err;
          });
        }); 
      });
    } else { fs.mkdirSync(tmpDir+"/test-assets"); }

    if (fs.existsSync(tmpDir+"/faux-knox")) {
      fs.readdir(tmpDir+"/faux-knox/", function (err, uploads) {
        uploads.forEach(function (uploadFileName) {
          fs.unlink(tmpDir+"/faux-knox/"+uploadFileName,function(err){
             if (err) throw err;
          });
        }); 
      });
    } else { fs.mkdirSync(tmpDir+"/faux-knox"); }

  } catch(err) {
    console.error(err);
  }
}

