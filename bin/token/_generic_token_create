#!/usr/bin/env node
var args = process.argv.slice(2);
var token = require("../../utils/internal-rfcx/token.js").token;

// this outputs a tab separated list of tokens, and saves them to the database

var howManyTokens = ((args[args.indexOf("--how_many")] === ("--how_many")) ? parseInt(args[args.indexOf("--how_many")+1]) : 1),
    finalParams = {},
    possibleParams = [
      [ "what_kind_of_token", "string"],
      [ "use_this_token_value", "string"],
      [ "token_length", "integer"],
      [ "reference_tag", "string"],
      [ "owner_primary_key", "integer"],
      [ "token_type", "string"],
      [ "minutes_until_expiration", "integer"],
      [ "only_allow_access_to", "string"],
      [ "created_by", "string"],
      [ "created_for", "string"],
      [ "allowed_redemptions", "integer"],
      [ "allow_garbage_collection", "boolean"]
    ];

for (i in possibleParams) {
  if (args[args.indexOf("--"+possibleParams[i][0])] === ("--"+possibleParams[i][0])) {
    finalParams[possibleParams[i][0]] = args[args.indexOf("--"+possibleParams[i][0])+1];
    if (possibleParams[i][1] === "integer") {
      finalParams[possibleParams[i][0]] = parseInt(finalParams[possibleParams[i][0]]);
    }
  }
}

var columns = [ "type", "guid", "token", "expires_at" ];
if (finalParams.what_kind_of_token === "registration") { columns = [ "type", "code", "expires_at" ]; }
console.log( columns.join("\t") );

for (var i = 0; i < howManyTokens; i++) {

  switch(finalParams.what_kind_of_token) {
    
    case "anonymous":
      token.createAnonymousToken(finalParams).then(function(tkn){
          console.log( [ finalParams.what_kind_of_token, tkn.token_guid, tkn.token, tkn.token_expires_at.toISOString()].join("\t") );
        }).done();
      break;

    case "user":
      token.createUserToken(finalParams).then(function(tkn){
          console.log( [ finalParams.what_kind_of_token, tkn.token_guid, tkn.token, tkn.token_expires_at.toISOString()].join("\t") );
        }).done();
      break;
      
    case "registration":
      token.createRegistrationToken(finalParams).then(function(tkn){
          console.log( [ finalParams.what_kind_of_token, (tkn.token_guid+tkn.token).toUpperCase(), tkn.token_expires_at.toISOString()].join("\t") );
        }).done();
      break;
    
    default:
      token.createAnonymousToken(finalParams).then(function(tkn){
          console.log( [ finalParams.what_kind_of_token, tkn.token_guid, tkn.token, tkn.token_expires_at.toISOString()].join("\t") );
        }).done();
  }

}
