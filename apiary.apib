FORMAT: 1A
HOST: http://127.0.0.1:8080/v1/

# RFCX API

Caution: all of these endpoints are still in development. These are not stable
intefaces.

# Group Console App

We need to add the guid (as x-auth-user) and token (as x-auth-token) as headers
to all further requests.

## Authentication [/users/login]
Get guid and token for user

### Retrieve token [POST]

+ Request (application/json)

        { }

+ Response 200 (application/json; charset=utf-8)
Your password was correct and a token is included in the message.

    + Attributes(array)

        + (object) - user object response
            + guid (string) - user id (x-auth-user header)
            + type (string) - user type
            + username (string) - username
            + email (string) - user's email
            + is_email_validated (boolean) - if email was validated by user
            + last_login_at (string) - ISO 8601 date time string, last time user was online
            + tokens (array) - array with user tokens
                + (object)
                    + token (string) = token value (x-auth-token header)
                    + token_expires_at (string) = ISO 8601 date time string, time when token will be invalid

    + Body

            [{
                "guid": "63079ab5-fd39-4486-b01c-f61426ffce50",
                "type": "user",
                "username": null,
                "email": "test@local.com",
                "is_email_validated": false,
                "last_login_at": "2016-06-01T09:58:50.660Z",
                "tokens": [{
                    "token": "xfji1qh1k58rphqwl1vp0cq3j3plqsf0fitduuq7",
                    "token_expires_at": "2016-06-02T09:58:50.660Z"
                }]
            }]

## User Info [/users/{user_id}]

### Get User Data [GET]

+ Parameters
    +  user_id: `a4d3ed62-456d-4266-b018-17d9d45d5dbf` (string, required) - guid of the user

+ Request (application/x-www-form-urlencoded)

+ Response 200 (application/json; charset=utf-8)

    + Attributes(array)

        + (object) - user object response
            + guid (string) - user id (x-auth-user header)
            + type (string) - user type
            + username (string) - username
            + email (string) - user's email
            + is_email_validated (boolean) - if email was validated by user
            + last_login_at (string) - ISO 8601 date time string, last time user was online
            + tokens (array) - array with user tokens
                + (object)
                    + token (string) = token value (x-auth-token header)
                    + token_expires_at (string) = ISO 8601 date time string, time when token will be invalid

    + Body

            [{
                "guid": "63079ab5-fd39-4486-b01c-f61426ffce50",
                "type": "user",
                "username": null,
                "email": "test@local.com",
                "is_email_validated": false,
                "last_login_at": "2016-06-01T09:58:50.660Z",
                "tokens": [{
                    "token": "xfji1qh1k58rphqwl1vp0cq3j3plqsf0fitduuq7",
                    "token_expires_at": "2016-06-02T09:58:50.660Z"
                }]
            }]

## Sites [/sites]

Get sites collection

### Get Sites [GET]

+ Request (application/x-www-form-urlencoded)

+ Response 200 (application/json; charset=utf-8)

    + Attributes(array)

        + (object) - site object
            + guid (string) - site's id
            + name (string) - site's name
            + description (string) - site's description
            + cartodb_map_id (string) - map id for cartodb service
            + flickr_photoset_id (string) - flickr service id
            + is_active (boolean) - site's status

    + Body

            [
              {
                "guid": "derc",
                "name": "RFCx Lab",
                "description": "Haight Ashbury, San Francisco, California",
                "cartodb_map_id": "82b89e88-f90d-11e5-bdca-0ecd1babdde5",
                "flickr_photoset_id": {},
                "is_active": true
              },
              {
                "guid": "bolivia",
                "name": "Bolivia-Liz",
                "description": "Test Pilot",
                "cartodb_map_id": {},
                "flickr_photoset_id": {},
                "is_active": true
              }
            ]

## Datafilters [/datafilters/labelling/{tag_values}]

### Get guids [GET]

+ Parameters
    +  tag_values: `chainsaw` (string) - tag values

+ Request (application/x-www-form-urlencoded)

+ Response 200 (application/json; charset=utf-8)

    + Attributes(object)

            + (object) - response object
                + data (object) - response data
                    + type (string) - object's type
                    + attributes (object) - object's attributes
                        + audio (object) - audio object
                            + guid (string) - audio's guid
                            + link (string) - link to audio
                            + labels (string) - link to labels
                + links (object) response links
                    + self (string) - link to object in database

    + Body

            {
                "data": {
                    "type": "datafilter",
                    "attributes": {
                        "audio": [{
                            "guid": "111d2ce2-ab99-4e3f-bb53-d8d319aa0385",
                            "link": "http://localhost:8080/v1/audio/111d2ce2-ab99-4e3f-bb53-d8d319aa0385",
                            "labels": "http://localhost:8080/v1/audio/111d2ce2-ab99-4e3f-bb53-d8d319aa0385/labels"
                        }]
                    }
                },
                "links": {
                    "self": "http://localhost:8080/v1/datafilters/labelling/chainsaw"
                }
            }

## Tags [/tags]

### Create Tag [POST]

+ Request (application/json)

        {
            "data": {
                "type": "tag",
                "attributes": {
                    "beginsAtOffset": 2000,
                    "endsAtOffset": 4000,
                    "type": "test",
                    "audioId": "111d2ce2-ab99-4e3f-bb53-d8d319aa0385",
                    "value": "testvalue",
                    "confidence": 0
                }
            }
        }

+ Response 201 (application/json; charset=utf-8)

    + Attributes(object)

            + (object) - response object
                + data (object) - response data
                    + type (string) - object's type
                    + attributes (object) - object's attributes
                        + type (string) - tag's type
                        + beginsAtOffset (number) - when events starts from audio start (in ms)
                        + beginsAt (string) - when events starts (in date JSON string)
                        + endsAtOffset (number) - when events ends from audio start (in ms)
                        + endsAt (string) - when events ends (in date JSON string)
                        + audioId (string) - guid of audio
                        + value (string) - tag's value
                        + confidence (number) - float value from 0.0 to 1.0 indicating how true is value
                        + taggedByUser (string) - guid of user which has created this tag
                + links (object) response links
                    + self (string) - link to object in database

    + Body

            {
                "data": {
                    "id": "b305124c-eeac-4354-942e-cca9e17de7a6",
                    "type": "tag",
                    "attributes": {
                        "type": "test",
                        "beginsAtOffset": 2000,
                        "endsAtOffset": 4000,
                        "audioId": "111d2ce2-ab99-4e3f-bb53-d8d319aa0385",
                        "value": "testvalue",
                        "confidence": 0,
                        "taggedByUser": "90fd49e4-066a-4b0f-8bba-b5e5a664fbf6",
                        "beginsAt": "2016-07-14T14:33:32.927Z",
                        "endsAt": "2016-07-14T14:33:34.927Z"
                    }
                },
                "links": {
                    "self": "http://localhost:8080/v1/tags/b305124c-eeac-4354-942e-cca9e17de7a6"
                }
            }

# Data Structures

## stream (object)
+ active(boolean) - (new) whether the stream is currently active or not, this will be used for streams that will used for streams under construction
+ type (string) - 'playlist' (a curated stream from the past) or 'stream' (a live stream)
+ shortname (string) - for titles
+ name (string) - fully descriptive title
+ description (string) - a description of what we hear in the stream (especially for curated streams from the past), this could be used for the body of a player
+ location (string) - textual description of the location
+ timezone_offset (string) - UTC offset
+ flick_photoset_id (string) - this ID can be used to get photos from Flickr that are curated for this particular stream; this could be used for a slide show while streaming
+ urls
    + audio (string) - url to retrieve the audio data